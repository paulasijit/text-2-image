pipeline {
    agent any
    environment {
        DOCKER_IMAGE_TAG = "${currentBuild.number}"
        BACKEND_IMAGE = "bhumika-t2i-backend:${DOCKER_IMAGE_TAG}"
        FRONTEND_IMAGE = "bhumika-t2i-frontend:${DOCKER_IMAGE_TAG}"
    }
    stages {
        stage("Code Fetch") {
            steps {
                git url: "https://github.com/paulasijit/text-2-image", branch: "main"
            }
        }
        stage("Build Backend Docker Image") {
            steps {
                sh "docker build -t bhumika-t2i-backend:${DOCKER_IMAGE_TAG} src/backend"
            }
        }
        stage("Build Frontend Docker Image") {
            steps {
                sh "docker build -t bhumika-t2i-frontend:${DOCKER_IMAGE_TAG} src/frontend"
            }
        }
        stage("Push Backend Docker Images") {
            steps {
                withCredentials([usernamePassword(credentialsId:"DockerHubCred",passwordVariable:"dockerpassword",usernameVariable:"dockerusername")]){
                    sh "docker login -u ${env.dockerusername} -p ${env.dockerpassword}"
                    sh "docker tag bhumika-t2i-backend:${DOCKER_IMAGE_TAG} ${env.dockerusername}/bhumika-t2i-backend"
                    sh "docker push ${env.dockerusername}/bhumika-t2i-backend"
                }
            }
        }
        stage("Push Frontend Docker Images") {
            steps {
                withCredentials([usernamePassword(credentialsId:"DockerHubCred",passwordVariable:"dockerpassword",usernameVariable:"dockerusername")]){
                    sh "docker login -u ${env.dockerusername} -p ${env.dockerpassword}"
                    sh "docker tag bhumika-t2i-frontend:${DOCKER_IMAGE_TAG} ${env.dockerusername}/bhumika-t2i-frontend"
                    sh "docker push ${env.dockerusername}/bhumika-t2i-frontend"
                }
            }
        }
        stage("Deploy Kubernetes pods") {
            steps {
                sh "sudo kubectl apply -f manifests/deploy/mysql-deploy.yaml"
                sh "sudo kubectl apply -f manifests/deploy/nginx-deploy.yaml"
                sh "sudo kubectl apply -f manifests/deploy/backend-deploy.yaml"
                sh "sudo kubectl apply -f manifests/deploy/frontend-deploy.yaml"
            }
        }
        stage("Set Ingress rules for Frontend and Backend") {
            steps {
                sh "sudo kubectl apply -f manifests/ingress/ingress-backend.yaml"
                sh "sudo kubectl apply -f manifests/ingress/ingress-frontend.yaml"
            }
        }
        stage("Deploy Kubernetes services") {
            steps {
                sh "sudo kubectl apply -f manifests/svc/backend-service.yaml"
                sh "sudo kubectl apply -f manifests/svc/frontend-service.yaml"
                sh "sudo kubectl apply -f manifests/svc/nginx-svc.yaml"
            }
        }
    }
    post {
        success {
            script {
                def backendContainers = sh(script: "docker container ls --filter ancestor=${BACKEND_IMAGE} -q", returnStdout: true).trim()
                def frontendContainers = sh(script: "docker container ls --filter ancestor=${FRONTEND_IMAGE} -q", returnStdout: true).trim()
                
                if (backendContainers) {
                    sh "docker container stop ${backendContainers}"
                    sh "docker container rm ${backendContainers}"
                }
                
                if (frontendContainers) {
                    sh "docker container stop ${frontendContainers}"
                    sh "docker container rm ${frontendContainers}"
                }
                
                sh 'docker image prune -f'
                sh "docker rmi ${BACKEND_IMAGE} ${FRONTEND_IMAGE}"
            }
        }
        failure {
            sh 'echo "Build failed"'
            sh 'docker rmi ${BACKEND_IMAGE} ${FRONTEND_IMAGE}'
        }
    }
}
